'''
Импорт необходимых библиотек:

pymysql — библиотека для подключения и работы с MySQL базами данных через Python.
config — файл, содержащий информацию о подключении: host, user, password, db_name.
Это позволяет изолировать конфиденциальные данные, не хардкодя их в основной скрипт.
pandas — библиотека для работы с табличными данными.
 Используется для обработки данных, полученных из базы данных.
matplotlib.pyplot — библиотека для построения графиков.
Настройки отображения pandas:

Используются для удобства вывода больших таблиц на экран. Например, устанавливаем максимальное количество колонок, строк и ширину вывода, чтобы видеть больше данных без их сокращения.
Попытка подключения к базе данных:

Используем try-except, чтобы обработать возможные ошибки при подключении.
Например, если сервер базы данных недоступен или учетные данные неверны.
connection = pymysql.connect(...) создает соединение с базой данных, используя заданные параметры (хост, пользователь, пароль, имя базы данных).
Работа с базой данных с использованием курсора:

with connection.cursor() as cursor: — здесь используется with, чтобы автоматически закрыть курсор после работы с ним. Курсор используется для выполнения SQL-запросов.
Запрос "SELECT * FROM procurement_data" извлекает все данные из таблицы procurement_data.
rows = cursor.fetchall() возвращает все строки результата запроса в виде списка словарей (благодаря использованию DictCursor).
Создание DataFrame:

df = pd.DataFrame(rows) — преобразует полученные строки в DataFrame, что упрощает дальнейшую работу с данными (анализ, фильтрация и т.д.).
Альтернативный способ использования pandas.read_sql():

data = pd.read_sql(query, connection) — позволяет напрямую создать DataFrame из базы данных, используя открытое соединение и SQL-запрос. Это упрощает процесс извлечения данных.
Закрытие соединения:

connection.close() — закрывает соединение с базой данных, чтобы избежать утечек ресурсов. Лучше всего это делать в блоке finally, так как он выполняется независимо от того, произошла ошибка или нет.
Обработка ошибок:

except Exception as ex: — в случае ошибки подключение не выполняется, и выводится сообщение Connection refused... вместе с описанием исключения ex. Это помогает понять, что пошло не так (например, неверные учетные данные или недоступность сервера).

'''

import pymysql
from config import host, user, password, db_name
import pandas as pd
import matplotlib.pyplot as plt

# Устанавливаем параметры отображения для pandas
pd.set_option('display.max_columns', 1000)  # Количество отображаемых колонок
pd.set_option('display.width', 1000)  # Ширина вывода для DataFrame
pd.set_option('display.max_rows', 500)  # Количество отображаемых строк

try:
    # Подключение к базе данных
    connection = pymysql.connect(
        host=host,  # Хост базы данных
        port=3306,  # Порт для подключения (обычно MySQL использует порт 3306)
        user=user,  # Имя пользователя для подключения
        password=password,  # Пароль для подключения
        database=db_name,  # Имя базы данных
        cursorclass=pymysql.cursors.DictCursor  # Используем DictCursor для возврата данных в виде словарей
    )

    print("Successfully connected...")  # Уведомление об успешном подключении
    print("#" * 20)  # Разделитель для визуального удобства

    try:
        # Выполняем SQL-запрос и создаем DataFrame с помощью курсора
        with connection.cursor() as cursor:
            # SQL-запрос для получения всех данных из таблицы `procurement_data`

            query = "SELECT * FROM procurement_data_2"


            cursor.execute(query)  # Выполнение запроса
            rows = cursor.fetchall()  # Получаем все строки из результата запроса

            # Создание DataFrame из полученных данных
            # df = pd.DataFrame(rows)
            #
            # # Вывод DataFrame
            # print(df)

        # Альтернативный способ: использование pandas для выполнения SQL-запроса, пока соединение все еще открыто
        # Этот метод проще, так как сразу создает DataFrame
        data = pd.read_sql(query, connection)
        print(data)

    finally:
        # Закрываем соединение с базой данных
        connection.close()

except Exception as ex:
    # Если возникла ошибка, выводим сообщение и само исключение
    print("Connection refused...")
    print(ex)
